/**
 * File header added to all generated .d.ts files.
 */
export const FILE_HEADER = `// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY IT.

/**
 * Generated by contentful-typegen.
 * 
 * - Content type interfaces are prefixed with "I" (e.g., IArticleFields).
 * - Core types (Asset, Entry, Document, Sys) are defined locally below.
 * - This keeps the file dependency-free and stable across Contentful SDK changes.
 */
`;

/**
 * Core Contentful stubs used by the generator.
 *
 * These are intentionally minimal definitions, safe for most use cases.
 * They avoid pulling in the Contentful delivery SDK as a dependency.
 */
export const CORE_TYPES = `
/** System metadata common to all Contentful entities. */
export interface Sys {
  id: string;
  type: string;
  createdAt: string;
  updatedAt: string;
  locale?: string;
  contentType?: { sys: { id: string; linkType: "ContentType"; type: "Link" } };
}

/** File metadata for an Asset (size, image dimensions). */
export interface AssetFileDetails {
  size: number;
  image?: { width: number; height: number };
}

/** File object for an Asset (URL, type, etc.). */
export interface AssetFile {
  url: string;
  details: AssetFileDetails;
  fileName: string;
  contentType: string;
}

/** Asset fields (title, description, file). */
export interface AssetFields {
  title?: string;
  description?: string;
  file?: AssetFile;
}

/** A minimal representation of a Contentful Asset. */
export interface Asset {
  sys: Sys;
  fields: AssetFields;
  metadata?: unknown;
}

/** A minimal representation of a Contentful Entry. */
export interface Entry<TFields = any> {
  sys: Sys;
  fields: TFields;
  metadata?: unknown;
}

/** Minimal Rich Text Document root node. */
export interface Document {
  nodeType: "document";
  data: Record<string, unknown>;
  content: any[];
}
`;

/**
 * CLI help/usage text.
 * Keep it here so it's easy to update and test.
 */
export const CLI_HELP = `
contentful-typegen

Usage:
  contentful-typegen [--space <SPACE_ID>] [--env <ENV_ID>] [--token <MGMT_TOKEN>] [--out <path>] [--prefix I]

Environment variables:
  CF_SPACE_ID
  CF_ENV
  CF_MANAGER_TOKEN

Examples:
  # Use env vars from .env
  contentful-typegen --out types/contentful.d.ts

  # Explicit flags (override env)
  contentful-typegen --space $CF_SPACE_ID --env $CF_ENV --token $CF_MANAGER_TOKEN --out types/contentful.d.ts --prefix I
`;
